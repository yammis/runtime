package manage.util;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.IvParameterSpec;

/**
 *
 *@Author yammis
 *@Date 2014-10-16 上午9:52:48
 *@Version 1.0
 *
 */

public class DESUtil {
	//解密数据  
	public static final String DES_KEY="j7Fe8Dt9";
    public static String decrypt(String message,String key) throws Exception {  
           
            byte[] bytesrc =convertHexString(message);     
            Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");      
            DESKeySpec desKeySpec = new DESKeySpec(key.getBytes("UTF-8"));     
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");     
            SecretKey secretKey = keyFactory.generateSecret(desKeySpec);     
            IvParameterSpec iv = new IvParameterSpec(key.getBytes("UTF-8"));  
                  
            cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);        
            
            byte[] retByte = cipher.doFinal(bytesrc);       
            return new String(retByte);   
    }  
 
    public static byte[] encrypt(String message, String key)  
            throws Exception {  
        Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");  
 
        DESKeySpec desKeySpec = new DESKeySpec(key.getBytes("UTF-8"));  
 
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");  
        SecretKey secretKey = keyFactory.generateSecret(desKeySpec);  
        IvParameterSpec iv = new IvParameterSpec(key.getBytes("UTF-8"));  
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);  
 
        return cipher.doFinal(message.getBytes("UTF-8"));  
    }   
    
    public static byte[] convertHexString(String ss)   
    {   
    byte digest[] = new byte[ss.length() / 2];   
    for(int i = 0; i < digest.length; i++)   
    {   
    String byteString = ss.substring(2 * i, 2 * i + 2);   
    int byteValue = Integer.parseInt(byteString, 16);   
    digest[i] = (byte)byteValue;   
    }   
 
    return digest;   
    }    
}

